/* [font] */

/* #IMPORTS */

    /* ##SASS */
@use 'sass:string';
@use 'sass:list';
@use 'sass:map';

    /* ##GLOBALS */
@use '../globals/vars' as *;

/* #FUNCTIONS */

    /* ##GET */
@function font_getFamilies()
{
    $families: ();

    @each $family, $rest in $VARS_FONT_FACES { $families: list.append($families, $family); }

    @return $families;
}

@function font_getSplitPath($path)
{
    $l: string.length($path);
    $i: $l;

    $extension: false;
    $name     : false;
    $src      : false;

    @while $i > 0
    {
        $char: string.slice($path, $i, $i);

        @if $extension
        {
            @if $char == '/'
            {
                $name: string.slice($path, $i + 1, $l - string.length($extension) - 1);
                $src : string.slice($path, 0, $i);

                $i: 0;
            }
        }
        @else if $char == '.' { $extension: string.slice($path, $i + 1); }

        $i: $i - 1;
    }

    @return (src: $src, name: $name, extension: $extension);
}

@function font_getFileFormat($extension)
{
    $format: map.get((otf: 'opentype', ttf: 'truetype', eot: 'embedded-opentype', woff: 'woff', woff2: 'woff2'), $extension);

    @if $format == null { @debug 'Invalid extension "#{$extension}"'; }

    @return $format;
}

/* #VARIABLES */

    /* ##THIS */
$FONT_DEFAULT: monospace, 'sans-serif', arial;

/* #MIXINS */

    /* ##UTILS */
@mixin font_face($family, $paths: false, $weight: false, $style: false)
{
    @if $paths
    {
        $pathsChecker: ();
        $namesChecker: ();

        $locals: ();
        $urls  : ();

        @each $path in $paths
        {
            @if (not list.index($pathsChecker, $path))
            {
                $splitPath: font_getSplitPath($path);
                $name     : map.get($splitPath, 'name');
                $extension: map.get($splitPath, 'extension');

                @if ($name and $extension)
                {
                    $format      : font_getFileFormat($extension);
                    $urls        : list.append($urls, url($path) format($format), comma);
                    $pathsChecker: list.append($pathsChecker, $path);

                    @if (not list.index($namesChecker, $name))
                    {
                        $locals      : list.append($locals, local($name), space);
                        $namesChecker: list.append($namesChecker, $name);
                    }
                }
                @else { @debug 'Wrong path "#{path}".'; }
            }
            @else { @debug 'Duplicate path "#{$path}".'; }
        }

        @font-face
        {
            font-family : $family;
            src         : list.join($locals, $urls, comma);
            font-display: swap;

            @if $weight { font-weight: $weight; }
            @if $style  { font-style : $style ; }
        }
    }
}

@mixin font_constructor($color: false, $family: false, $size: false, $weight: false, $style: false, $space: false, $height: false, $settings: false)
{
    @if      list.index(font_getFamilies(), $family) { font-family: $family, $FONT_DEFAULT; }
    @else if $family == 'default'                    { font-family: $FONT_DEFAULT;          }

    @if $color    { color         : $color ; }
    @if $size     { font-size     : $size  ; }
    @if $weight   { font-weight   : $weight; }
    @if $style    { font-style    : $style ; }
    @if $space    { letter-spacing: $space ; }
    @if $height   { line-height   : $height; }
    @if $settings { @extend %FONT_SETTINGS ; }
}

@mixin font_strokeShadow($c: inherit, $s: 1px) { text-shadow: $s $s $c, $s*-1 $s $c, $s*-1 $s*-1 $c, $s $s*-1 $c; }

/* #PLACEHOLDERS */

    /* ##UTILS */
%FONT_SETTINGS
{
    font-stretch           : 100%;
    text-indent            : 0;
    font-variant           : normal;
    font-kerning           : normal;
    font-feature-settings  : normal;
    font-variation-settings: normal;
    -webkit-font-smoothing : antialiased;
    -moz-osx-font-smoothing: grayscale;
    font-optical-sizing    : auto;
    text-rendering         : geometricPrecision;
}